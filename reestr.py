# Родительский класс Животное
class Животное:
    def __init__(self, имя, дата_рождения):
        self.__имя = имя  # Приватная переменная
        self.__дата_рождения = дата_рождения  # Приватная переменная

    # Геттеры
    def get_имя(self):
        return self.__имя

    def get_дата_рождения(self):
        return self.__дата_рождения

    # Сеттеры
    def set_имя(self, имя):
        self.__имя = имя

    def set_дата_рождения(self, дата_рождения):
        self.__дата_рождения = дата_рождения

    def животное_информация(self):
        return f"{self.__имя}, {self.__дата_рождения}"

# Класс ДомашниеЖивотные наследует от Животного
class ДомашниеЖивотные(Животное):
    def __init__(self, имя, дата_рождения, команды=None):
        super().__init__(имя, дата_рождения)  # Вызов конструктора родительского класса
        self.__команды = команды if команды else []  # Приватная переменная для команд

    # Геттеры
    def get_команды(self):
        return self.__команды

    # Сеттеры
    def set_команды(self, команды):
        self.__команды = команды

    def добавить_команду(self, команда):
        self.__команды.append(команда)

    def собака_команды(self):
        return ', '.join(self.get_команды())

# Классы для Вьючных животных
class ВьючныеЖивотные(Животное):
    def __init__(self, имя, дата_рождения, тип_животного):
        super().__init__(имя, дата_рождения)  # Вызов конструктора родительского класса
        self.__тип_животного = тип_животного  # Приватная переменная для типа животного

    # Геттеры
    def get_тип_животного(self):
        return self.__тип_животного

    # Сеттеры
    def set_тип_животного(self, тип_животного):
        self.__тип_животного = тип_животного

    def тип_животного_информация(self):
        return f"{self.get_имя()} - Тип животного: {self.__тип_животного}"

# Классы для конкретных видов домашних животных
class Собака(ДомашниеЖивотные):
    def __init__(self, имя, дата_рождения, команды):
        super().__init__(имя, дата_рождения, команды)

class Кошка(ДомашниеЖивотные):
    def __init__(self, имя, дата_рождения, команды):
        super().__init__(имя, дата_рождения, команды)

class Хомяк(ДомашниеЖивотные):
    def __init__(self, имя, дата_рождения):
        super().__init__(имя, дата_рождения)

# Классы для конкретных видов вьючных животных
class Лошадь(ВьючныеЖивотные):
    def __init__(self, имя, дата_рождения, тип_животного):
        super().__init__(имя, дата_рождения, тип_животного)

class Верблюд(ВьючныеЖивотные):
    def __init__(self, имя, дата_рождения, тип_животного):
        super().__init__(имя, дата_рождения, тип_животного)

class Осел(ВьючныеЖивотные):
    def __init__(self, имя, дата_рождения, тип_животного):
        super().__init__(имя, дата_рождения, тип_животного)

# Функции для работы с реестром
def создать_животное():
    имя = input("Введите имя животного: ")
    дата_рождения = input("Введите дату рождения животного (ГГГГ-ММ-ДД): ")
    тип_животного = input("Введите тип животного (домашнее/вьючное): ").lower()

    if тип_животного == "домашнее":
        команды = input("Введите команды для животного (через запятую): ").split(", ")
        животное = Собака(имя, дата_рождения, команды)  # Для примера создадим собаку
    else:
        тип_животного = input("Введите тип вьючного животного (лошадь/верблюд/осел): ").lower()
        животное = Лошадь(имя, дата_рождения, тип_животного)  # Для примера создадим лошадь

    return животное

def показать_команды(животное):
    команды = животное.get_команды()
    if команды:
        print(f"Команды для {животное.get_имя()}: {', '.join(команды)}")
    else:
        print(f"{животное.get_имя()} не обучен командам.")

def обучить_животное(животное):
    новая_команда = input("Введите новую команду для животного: ")
    животное.добавить_команду(новая_команда)
    print(f"Животное {животное.get_имя()} теперь знает команду: {новая_команда}")

def меню():
    животные = []  # Список для хранения созданных животных

    while True:
        print("\nМеню:")
        print("1. Завести новое животное")
        print("2. Посмотреть команды животного")
        print("3. Обучить животное новым командам")
        print("4. Выйти")

        выбор = input("Выберите опцию (1-4): ")

        if выбор == "1":
            животное = создать_животное()
            животные.append(животное)
            print(f"{животное.get_имя()} успешно добавлено!")

        elif выбор == "2":
            имя = input("Введите имя животного: ")
            найдено = False
            for животное in животные:
                if животное.get_имя() == имя:
                    показать_команды(животное)
                    найдено = True
                    break
            if not найдено:
                print("Животное не найдено!")

        elif выбор == "3":
            имя = input("Введите имя животного: ")
            найдено = False
            for животное in животные:
                if животное.get_имя() == имя:
                    обучить_животное(животное)
                    найдено = True
                    break
            if not найдено:
                print("Животное не найдено!")

        elif выбор == "4":
            print("Выход из программы...")
            break

        else:
            print("Неверный выбор, попробуйте снова.")

# Запуск программы
меню()

